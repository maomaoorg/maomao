复仇计划

[X] 1. 代理日本雅虎 已失败，因为经过多方证明是没办法的。
 [X] 1. 确定使用什么库
 先试试http-proxy
   [X] 1. 使用redbird对localhost:8080/代理到auctions.yahoo.co.jp/
   [X] 2. 使用client来获取目标网址，然后通过express回传？
     首先，css文件是通过html里面嵌的标签，然后通过浏览器来自动获取的，这说明html里面的链接是没办法控制的。是否只能通过api来代理？
	 
 [X] 2 确定代理的精细度，比如是否可以阻断某个特定域名(*/user/*)的连接
 已知： 现在日本雅虎官方是不再支持api操作了，可能是因为害怕对普通客户不公平，所以我要做的就是，让客户通过我的代理服务器对雅虎进行浏览
 [ ] 3 全面面向手机用户，所以代理的网站应当返回手机版网页，而不是桌面版
   [ ] 1. 弄明白雅虎拍卖是嗅探了user-agent还是怎样
   假设	： 是通过嗅探user-agent，盗用user-agent发请求尝试
[ ] 2. 显示购物进度
[ ] 3. 自动入札
[ ] 4. 显示实时汇率，根据支付宝汇率api
[ ] 5. 使用爬虫代理雅虎拍卖
 [X] 1. 首先实现单个商品页面的显示，至少能让用户通过aid对商品进行信息浏览
  [X] 1. 必要信息：
    [X] 图片，
	    [X] 在入口文件没有找到，那应该是追加的 不是追加的
		  [X] 搞清楚是怎么加载图片的，假设存在一个接口，是通过aid获取图片地址，然后在js里面获取之后，追加到html
			[X] 首先追加部分，应该是可以查得到的, 在html里，或者js里面，搜索对应的追加语句即可，比如xxx.append啥的
			  通过对比原始html，就可以知道哪些是追加的
		  [X] 小图 $('.ProductImage__thumbnail').map(i => {
				const img = $(i).find('img')
				img.attr('src')
			})
			  [X] 小图的cheerio方法, 将map换成each就完事

			[?] 大图
  	[X] title， $('.ProductTitle__text').text()
  	[X] 现在价格（税），价格 $('.Price__value').text().trim() 税 $('.Price__tax').text()
  	[X] 剩余时间（终止时间），
  	  [X] 剩余时间 $('.StickyNavigation__number').text().replace('詳細','').trim()
  	  [X] 终止时间 
			[X] 获取nanotime
			  冗余信息:
				  1. GET "https://page.auctions.yahoo.co.jp/now?aID=g389045696&nowtime=" + new Date().getTime() 

  	[X] 商品说明 $('.ProductExplanation__commentBody').text().trim()
  	  更好的方案： $('.ProductExplanation__body').html()
  	[ ] 出品者情报
  [X] 2. aid q331259778，用axios获取https://page.auctions.yahoo.co.jp/jp/auction/q331259778，看看上述信息能否只通过一个请求获取
	[X] 3. 访问localhost:8088/auction/q331259778, 能够显示正确信息
 [ ] 代理搜索功能，按照推荐顺序显示，并且显示页数 
  
[X] 6. 使用react架构写前端
  [X] 1. 制作首页HomePage component, 显示logo, 显示：雅虎拍卖商品查看器
	[X] 2. 制作商品查看Component
	[X] 3. 按下Enter跳转到商品查看页面
	  思路: 仅仅是替换组件罢了
  [X] 4. 通过jq获取服务器信息，测试模式下访问独立服务器，用全局变量来切换url
[X] 7. 部署网站到服务器
  [X] 尝试启动react服务器，并且从远端访问，看是不是防火墙的锅
[X] 8. 代理煤炉商品
  [X] 测试
	[X] 现在出了403问题，不知道是什么原因，可能是agent屏蔽了axios，先试一下别的
			问题出在`Accept-encoding`上，只要这个模仿chrome就可以了，但是为了保险起见，还是加上useragent
  [X] 在vps上面出现403问题，不确定是否ip屏蔽了，尝试建立ss，让本机连一下然后访问mercari商品页试试
			已确认问题在于煤炉屏蔽了vps的ip
			换了一个德国的ip，终于可以用
[X] 9. 打包时注意关闭soursemap
  `npm run build --nomaps`

[X] 10. 修复煤炉页面简单描述和描述互换的bug
[X] 11. 在请求页面时候, 带上请求参数，直接定位到商品查看器
[X] 12. 在商品查看器页面增加购买组件, fixed在最下面

[ ] 13. 增加翻译功能
[X] 14. 煤炉搜索商品功能
  [X] 首先搜索一次看看，通过什么url，通过什么jq表达式来爬取
	  [X] url: https://www.mercari.com/jp/search/?keyword=casio
		  第二页: https://www.mercari.com/jp/search/?page=2&keyword=casio
		[X] jq表达式
		  1. 图片: $($($('.items-box')[0]).find('img')).attr('src')
			2. 价格: $($($('.items-box')[0]).find('.items-box-price')).text()
  [X] 冗余信息
	  1. 每页显示132个似乎
		2. 小图的地址似乎跟大图不一样: https://static.mercdn.net/thumb/photos/m68864320816_1.jpg?1575544634
		  大图: https://static.mercdn.net/item/detail/orig/photos/m68864320816_1.jpg?1575544634
  [X] 创建小图用的文件夹tmp_thumb_imgs
	[X] 用grid来显示
	[X] 点击图片后进入商品查看页面
[X] 15. 煤炉图片代理
  [X] 搞清楚axios是怎么下载东西的, 写一个测试，下载一张图片到指定位置 (Solved, 检查test_axios.js/downloadImg)
	[X] 提取图片名, 需要用正则匹配，并且提取出来 (Solved: str.match(/(m[1-9].*\.jpg)/)[0])
[X] 16. 煤炉商品加载慢的时候，显示加载中的gif
[ ] 17. 直链进入煤炉搜索页面(带keyword)
[X] 18. 煤炉搜索商品添加分页
  首先后端是知道页码信息的, 现在在第几页，可以去哪几页，都是可以返回的
	使用隐藏页码的pagination, 因为煤炉本身也是隐藏总页数的
	[X] 在search的时候，返回的result里面带上currentPage和hasNextPage, 前端根据currentPage是否为1判断上一页是否可用,
    根据hasNextPage判断下一页是否可用
[D] 19. 统计日访问增长量, 以及搜索关键词
  [X] sqlite建表: view(ip, time), search_record(site, keyword, time)
	[X] 訪問首頁的時候，添加view記錄
	[ ] 煤爐搜索的時候，記錄search_record
	[X] 限制where條件, time限制在今天: select date('now')
	[X] knex的sqlite bug，不能自動用數字類型的timestamp跟日期類型的進行對比
	  resolve: 在輸入的時候也要用date函數，保持一致
  [ ] 初始化一個maomao.sqlite，然後移動為maomao.sqlite.template, 然後在ignore裏面加上.sqlite， 然後補充READEme
[X] 20. 评估sqlite作为生产及数据库
[ ] 21. 雅虎拍卖出价接口，尝试出价一次
[ ] 22. 煤炉sold标志
[X] 23. 增加购买流程显示, 在首页用九宫格显示, 但是图标怎么拿？ 
  显示的菜单： 1. 煤炉商品搜索 2. 雅虎商品查看 3. 购买流程
[ ] 24. 完成登錄到購買的流程
 [X] 在首頁添加登錄，注冊，訂單一覽，和用戶昵稱顯示入口， 如果沒有登錄添加登錄和注冊入口
  模仿其他頁面的頂部欄，複製一下Navbar到App.js就可以
	在rightcontent屬性裏填入鏈接即可
 [ ] 點擊立即購買的時候，請求後端API: getBuyInfo， 後端回傳結果。 如果失敗，如果沒登錄，隱藏當前頁面，彈出登錄頁面，成功情況，進入信息填寫頁面, 根據返回信息填寫支付寶賬號，收貨地址，電話等信息
 [ ] 點擊確認，後臺生成訂單，切換到訂單查看頁面, 使用步進器顯示進度
[ ] 25. 在主頁添加一個國際郵費多少的入口, 跳出圖片或者表格顯示
[X] 26. 使用gzip壓縮靜態資源
[ ] 27. 完成注冊和登錄功能
  [X] 點擊注冊后，請求API: /user/register, 在db生成一條數據, 密碼要用md5來存儲, 後端返回{err, userinfo}
	[X] 在相應的初始化脚本処加上表
	[ ] 將所有/user請求發送到user模塊
	[ ] 使用session時，設定消亡時長為20分鐘
	[ ] 登錄，保持session.userinfo對象，對象内存放整個app中常常會用到的數據，一開始只保存userinfo.username, nick即可
  [ ] 登錄后跳轉到開始頁面，此時應該正確顯示用戶信息
	[X] Q: 首頁在什麽時間點進行登錄信息的獲取？ solved: 在注冊，或者登錄tab返回的時候
	[X] Q: 各個組件之間怎麽共享登錄信息？ solved: 由homepage通過props分發下去
	[X] 注冊Navbar的leftClick回調上，添加homepage.getLoginInfo()的調用, 再增加tab switch的代碼
	[X] 登錄和注冊的抽象: 後臺為session增加userinfo是判斷用戶登錄與否的唯一標準，注冊后自動增加userinfo, 登陸相當於請求後臺增加session.userinfo, 兩者都是成功之後請求getLoginInfo
	[X] 增加登錄tab，複製自register即可，請求後端添加session.userinfo
	  [X] 前端
	  [X] 後端準確的登陸邏輯: 獲取表單中的username & password, 將password通過md5變換，隨後檢索user表，看是否有符合的記錄, 如果有，將數據行裏的數據保存到session.userinfo
		  測試: two function, first insertUserWithMd5pass, second getUserByUsernameAndPass
		[X] 聯調，首先注冊，第一次輸入一個沒用過的用戶名，預測結果是返回主頁，顯示為歡迎xxx，刷新後重新注冊一個一樣的用戶名，預期為彈出錯誤提示
		  然後是登錄，輸入正確的用戶名和密碼，輸入正確的用戶名但是密碼不正確
		[X] 使用正則限制用戶名和昵稱和密碼: 用戶名限制為/[_a-zA-Z]\w{7,15}/, 密碼限制為/[_a-zA-Z]\w{7,15}/, 昵稱length < 8
		[X] 使用Placehold在輸入框裏填寫注意事項, 用戶名: 8到16位字母開頭的字符串, 密碼: 同用戶名, 昵稱: 8個字符以下
		[X] 使用knex的paramater sql防止sql注入
[X] 28. 儅煤爐搜索的時候，將原來的list清空
[X] 29. 在商品的最下方，添加分享鏈接顯示
[X] 30. App.js裏面所有鏈接，也都用隱藏代替切換
  [X] 測試: 切換進煤爐搜索頁面之後, 點後退，不會重置登錄狀態
[X] 31. 雅虎當務之急:
  [X] 1. 雅虎商品查看通過鏈接進入
  [X] 2. 雅虎商品查看底部增加價格顯示
	  [X] 測試BottomPriceShow抽象是否成功, 打開任意一個煤爐商品即可
		[X] 雅虎商品價格的幾種選項: 1. 無稅 2. 有稅 3. 郵費無料 4. 郵費落札者承擔
	[X] 3. 即決價格要有提示
	[X] 4. 加載時的加載器
	[X] 5. 送料顯示
[X] 32. 煤爐商品頁面要顯示是否已經售出, 然後在搜索頁，顯示所有商品的估算金額
[X] 33. 將登錄放到App.js.componentDidMount去做, 這樣才能保持全局一致，然後後臺session保持30分鐘
  測試: 登錄后，輸入鏈接訪問某商品頁，能夠正確識別為登錄狀態，將bottom的購買按鈕的邏輯換成提示是否已經登錄
	[X] session30秒
[X] 34. 用戶點擊購買之後，創建order
  [X] order表: 商品title, state, 商品鏈接(本網站)
	[X] 測試驅動, 方法名: createOrder(title, url)
[X] BUG: 修改隱藏方式之後，不能通過mid直接進入商品查看頁面了
    原因出於由於緩存，沒有重新加載煤爐商品查看組件
		解決方案: 不要在didMount進行數據請求，而是在componentDidUpdate裏面進行操作
[X]	35. 訂單一覽頁測試驅動 getAllOrdersByUsername()